/* MSc thesis Uppsala University
January 2021 
Erik Bootsma

This script is part of an effort to classify irrigated pixels in the Guadalquivir basin area.

Notes:
- Exclude the following pixels from the classifications:
    * Above 800 meter elevation
    * Part of the water mask. (CORINE water class is more precise than MODIS water mask)
    * Part of urban area in in CORINE land cover set from the year 2012
    
- You might get the following warning when exporting some file: "Error: Image.reduceRegions: Computed value is too large."
  I don't know why, but this seams to be associated with making use of too many SIOSE polygons. 
  This issue can be solved by only using the partitions of a few areas, using smaller partitions (e.g. only 5% of polygons)
  or decreasing the number of polygons in the SIOSE subsets.

This script is meant to be used with Landsat images.
*/



//==================================================================\\
//========================= INITIALIZATION =========================\\
//==================================================================\\

// Specify the landsat satellite, i.e. 'Landsat5', 'Landsat7' or 'Landsat8'
var LANDSAT_EDITION = 'Landsat5';
// Specify whether to use the radiance and brightness temperature as stored in the GEE data catalogue (true) or as computed in the script (false)
var LANDSAT_VARIABLES_PRE_COMPUTED = false;

// Define the year whose data will be used to train the Random Forest classifier
var ClassifierYear = 2011;
// Define the years who will be classified using the trained Random Forest classifier
// You have a use a normal list (not a GEE list!) filled with integer values
var YearsToClassify = [2011];

// Define region of interest. Select the Guadalquivir basin from the list of EU basins
var EU_Basins = ee.FeatureCollection('users/erikjan22/EU_Basins');
var Guadalquivir_basin = EU_Basins.filter(ee.Filter.eq('country', 'ES')).filter(ee.Filter.eq('nameText', 'GUADALQUIVIR'))
  .first().geometry();
// Since the Landsat images overlap at the edges, we don't need the images that only hit the border area of the roi
var GBbuffered = Guadalquivir_basin.simplify(100).buffer(-40000);

var roi = Guadalquivir_basin;
var roi_landsat = GBbuffered;

// Define the maximum allowed cloud cover for images
var max_cloud_cover = 90;

// Landsat derived settings
var percentiles = [5, 95];

// Determine the size of the border of Landsat images which should be cut
// Be aware, I am considering the geometry of the image, which often extends outside of the actual image
// 8000 is a good maximum size, whereby the edge pixels are all removed, but adjacent images are still slightly overlapping
// A buffer of 0 is not possible, so if you want no buffer, just put this vlaue very small (e.g. at 1)
var buffer_size = 1;

// Set a minimum surface area (ha) for polygons. Those polygons not fulfilling this requirement are not considered for the training of the classifier
var Min_Surface_Area = 5;

// Set the percentages of irrigated area for the entire feature to be labeled as 'irrigated'
var Low_Irr_Percentage = 10;  // everything below this is labeled as non-irrigated (i.e. 0)
var High_Irr_Percentage = 90;  // everything above this is labeled as irrigated (i.e. 1)

// ET data derived with S-SEBI
var SSEBI_Folder = 'users/erikjan22/S-SEBI/Seasonal_results'; // 'users/erikjan22/S-SEBI/Seasonal_ET';

// State which parameters will be used for the Random Forest classifier
var inputBands = [
  // landsat bands
  'B_p', 'G_p', 'R_p', 'NIR_p', 'SWIR-1_p', 'SWIR-2_p', 
  'NDVI_min', 'NDVI_max', 'NDVI_range', 'NDWI_min', 'NDWI_max', 'NDWI_range',
  'EVI_min', 'EVI_max', 'EVI_range', 'GI_min', 'GI_max', 'GI_range',
  // s-sebi bands
  'ET-W', 'ET-S',
  'LST-W', 'LST-S',
  'Alb-W', 'Alb-S',
  // modis bands
  /*'LST_M1', 'LST_M2', 'LST_M3', 'LST_M4', 'LST_M5', 'LST_M6', 'LST_M7', 'LST_M8', 'LST_M9', 'LST_M10', 'LST_M11', 'LST_M12',
  'ET_M1', 'ET_M2', 'ET_M3', 'ET_M4', 'ET_M5', 'ET_M6', 'ET_M7', 'ET_M8', 'ET_M9', 'ET_M10', 'ET_M11', 'ET_M12',
  'NDVI_M1', 'NDVI_M2', 'NDVI_M3', 'NDVI_M4', 'NDVI_M5', 'NDVI_M6', 'NDVI_M7', 'NDVI_M8', 'NDVI_M9', 'NDVI_M10', 'NDVI_M11', 'NDVI_M12',
  'EVI_M1', 'EVI_M2', 'EVI_M3', 'EVI_M4', 'EVI_M5', 'EVI_M6', 'EVI_M7', 'EVI_M8', 'EVI_M9', 'EVI_M10', 'EVI_M11', 'EVI_M12',
  // environmental bands
  'TEMP', 'PRCP',*/
  'Elevation', 'Slope'
  ];

// Specify how many data points you want to use for training
var nr_training_selected = 30000;  // consist of an equal number of irrigated and non-irrigated data points
// Specify how many data points you want to use for testing
var nr_testing_selected = 15000;  // consist of an equal number of irrigated and non-irrigated data points
// The number of features we want to randomly select from each of the irrigated and not-irrigated SIOSE FeatureCollections
var nr_non_irrigated_polygons_required = 350;
var nr_irrigated_polygons_required = 250;

// Exportation settings
var ImageExportDescription = 'Export_classified_image_to_GEE_asset';
var ExportAssetCollection = 'Irrigation';  // Can be a folder or image collection asset
var ImageExportName = 'Irrigation_classification';
var DriveFolder = 'GEEexports';
var ClassificationMetricsFileName = 'Irrigation_Classifier_Metrics';



//==================================================================\\
//========================= PRE-PROCESSING =========================\\
//==================================================================\\

// Define Landsat edition indicator
var EditionIndicator;
if (LANDSAT_EDITION == 'Landsat5') {EditionIndicator = 'L5';}
else if (LANDSAT_EDITION == 'Landsat7') {EditionIndicator = 'L7';}
else if (LANDSAT_EDITION == 'Landsat8') {EditionIndicator = 'L8';}

var landsat_start_date = ee.Date(ClassifierYear.toString().concat('-01-01'));
var landsat_end_date = landsat_start_date.advance(1, 'year');

// Import the necessary functions defined in another script.
var VARIOUS_FUNCTIONS = require('users/erikjan22/Evapotranspiration:Main project/A. Various functions');

// Use the function to import the data
var landsat_collection = VARIOUS_FUNCTIONS.LANDSATDATA(LANDSAT_EDITION, LANDSAT_VARIABLES_PRE_COMPUTED, 
  landsat_start_date, landsat_end_date, roi_landsat, max_cloud_cover, buffer_size);
var input_data = VARIOUS_FUNCTIONS.Create_Input_Data(ClassifierYear, landsat_collection, EditionIndicator, landsat_start_date, roi, percentiles, SSEBI_Folder);

print('Complete input:', input_data, 
      'Projection of input image after reprojection:', input_data.projection(), 
      'Scale of input image after reprojection:', input_data.projection().nominalScale());

 

//==============================================================\\
//========================= CLASS DATA =========================\\
//==============================================================\\

var SIOSEfolder = 'SIOSE_Partitions';
var percentage_level = '5';
var ClassifierYearStr = ClassifierYear.toString();

// Collect the SIOSE polygons for the relevant areas in Spain
// Cut out relevant part of SIOSE data (polygons which completely fall within the Guadalquivir basin area)
if (ClassifierYearStr == '2014') {
  var SIOSE_And = ee.FeatureCollection('users/erikjan22/' + SIOSEfolder + '/'+ClassifierYearStr+'_And_' + percentage_level);
}
else {
  var SIOSE_And_1 = ee.FeatureCollection('users/erikjan22/' + SIOSEfolder + '/'+ClassifierYearStr+'_And_1_' + percentage_level);
  var SIOSE_And_2 = ee.FeatureCollection('users/erikjan22/' + SIOSEfolder + '/'+ClassifierYearStr+'_And_2_' + percentage_level);
  var SIOSE_And_3 = ee.FeatureCollection('users/erikjan22/' + SIOSEfolder + '/'+ClassifierYearStr+'_And_3_' + percentage_level);
  var SIOSE_And_4 = ee.FeatureCollection('users/erikjan22/' + SIOSEfolder + '/'+ClassifierYearStr+'_And_4_' + percentage_level);
  var SIOSE_And = SIOSE_And_1.merge(SIOSE_And_2).merge(SIOSE_And_3).merge(SIOSE_And_4);
}
var SIOSE_Cas   = ee.FeatureCollection('users/erikjan22/' + SIOSEfolder + '/'+ClassifierYearStr+'_Cas_' + percentage_level);
var SIOSE_Ext   = ee.FeatureCollection('users/erikjan22/' + SIOSEfolder + '/'+ClassifierYearStr+'_Ext_' + percentage_level);
var SIOSE_Mur   = ee.FeatureCollection('users/erikjan22/' + SIOSEfolder + '/'+ClassifierYearStr+'_Mur_' + percentage_level);
// Merge all the SIOSE collections together and selection only the relevant polygons
var SIOSEcomplete = SIOSE_And.merge(SIOSE_Cas).merge(SIOSE_Ext).merge(SIOSE_Mur);

// Take out all elements which are too small
var SIOSEdata = SIOSEcomplete.filterMetadata('SUPERF_HA', 'not_less_than', Min_Surface_Area);

// Label the SIOSE polygons with irrigation information
SIOSEdata = VARIOUS_FUNCTIONS.SIOSE_Irrigation_Status(SIOSEdata, Low_Irr_Percentage, High_Irr_Percentage);

var SIOSEnonIrrigated = SIOSEdata.filterMetadata('Irrigation_Status', 'equals', 0);
var SIOSEirrigated = SIOSEdata.filterMetadata('Irrigation_Status', 'equals', 1);
var SIOSEpartlyIrrigated = SIOSEdata.filterMetadata('Irrigation_Status', 'equals', 2);

var SIOSEcompleteSize = SIOSEcomplete.size();
var SIOSEdataSize = SIOSEdata.size();
var SIOSEnonIrrigatedSize = SIOSEnonIrrigated.size();
var SIOSEirrigatedSize = SIOSEirrigated.size();
var SIOSEpartlyIrrigatedSize = SIOSEpartlyIrrigated.size();

print('Number of polygons in the complete SIOSE FeatureCollection:', SIOSEcompleteSize,
  'Number of SIOSE polygons after filtering for minimum area requirement:', SIOSEdataSize,
  '*) Of which are non-irrigated:', SIOSEnonIrrigatedSize,
  '*) Of which are irrigated polygons:', SIOSEirrigatedSize,
  '*) Of which are partly irrigated polygons:', SIOSEpartlyIrrigatedSize);

// Firstly non-irrigated features
var split_non_irrigated_collection = ee.Number(nr_non_irrigated_polygons_required).divide(SIOSEnonIrrigatedSize).float();
// Add a column of random values between 0 and 1 to the SIOSE FeatureCollection
var SIOSE_Subset_non_irr = SIOSEnonIrrigated.randomColumn('random_feature')
  // Use the random values between 0 and 1 in the SIOSE FeatureCollection to select a subset
  .filter(ee.Filter.lt('random_feature', split_non_irrigated_collection));

// Secondly irrigated features
var split_irrigated_collection = ee.Number(nr_irrigated_polygons_required).divide(SIOSEirrigatedSize).float();
// Add a column of random values between 0 and 1 to the SIOSE FeatureCollection
var SIOSE_Subset_irr = SIOSEirrigated.randomColumn('random_feature')
  // Use the random values between 0 and 1 in the SIOSE FeatureCollection to select a subset
  .filter(ee.Filter.lt('random_feature', split_irrigated_collection));

var SIOSE_Subset_non_irr_Size = SIOSE_Subset_non_irr.size();
var SIOSE_Subset_irr_Size = SIOSE_Subset_irr.size();

print('Required number of non-irrigated polygons:', nr_non_irrigated_polygons_required,
      'Required number of irrigated polygons:', nr_irrigated_polygons_required,
      'Number of selected SIOSE non-irrigated polygons:', SIOSE_Subset_non_irr_Size,
      'Number of selected SIOSE irrigated polygons:', SIOSE_Subset_irr_Size);  
  
// Sample the input data (ee.Image) for the SIOSE polygons 
// This will add the remote sensing variables together with the irrigation labels
// Also add a column with a random value in the range [0,1] for later usage
var non_irrigated_data = input_data.sampleRegions({
  // Get the sample from the polygons FeatureCollection.
  collection: SIOSE_Subset_non_irr,
  properties: ['Irrigation_Status'],
  // Set the scale to get Landsat pixels in the polygons.
  scale: 30
}).randomColumn('random_fraction');
var irrigated_data = input_data.sampleRegions({
  collection: SIOSE_Subset_irr,
  properties: ['Irrigation_Status'],
  scale: 30                      
}).randomColumn('random_fraction');

var size_non_irr_data = ee.Number(non_irrigated_data.size());
var size_irr_data = ee.Number(irrigated_data.size());



//============================================================\\
//========================= TRAINING =========================\\
//============================================================\\

// Create values between 0 and 1 which can be used to split the irrigated and non-irrigated data sets and select training data
var split_training_non_irr = ee.Number(nr_training_selected/2).divide(size_non_irr_data).float();
var split_training_irr = ee.Number(nr_training_selected/2).divide(size_irr_data).float();
// Create partition of training data
var trainingPartition_non_irr = non_irrigated_data.filter(ee.Filter.lt('random_fraction', split_training_non_irr));
var trainingPartition_irr = irrigated_data.filter(ee.Filter.lt('random_fraction', split_training_irr));
var training_data = trainingPartition_irr.merge(trainingPartition_non_irr);
var nr_training_actual = training_data.size();

// Create a Random Forest Classifier
var nr_trees = 150;
// The user can specify the number of variables per split. If unspecified, uses the square root of the number of variables
var classifier = ee.Classifier.smileRandomForest({numberOfTrees: nr_trees});

// Train the Random Forest Classifier
// NOTE: you do not have to use all the available bands as input properties. 
// Some of the input bands do not increase classifier accuracy or lower the spatial resolution of the resulting irrigation mapping.
var classifier = classifier.train({
    // features: The FeatureCollection to train on
    features: training_data,
    // classProperty: the property which holds the class labels
    classProperty: 'Irrigation_Status',
    // inputProperties: all the properties used by the classifier to determine the correct class label
    inputProperties: inputBands
    });

// Classify the training data.
var classifiedTraining = training_data.classify(classifier);

// Get a confusion matrix representing expected accuracy.
var trainAccuracy = classifiedTraining.errorMatrix('Irrigation_Status', 'classification');



//===========================================================\\
//========================= TESTING =========================\\
//===========================================================\\

// Create values between 0 and 1 which can be used to split the irrigated and non-irrigated data sets and select testing data
var split_testing_non_irr = ee.Number(1).subtract(ee.Number(nr_testing_selected/2).divide(size_non_irr_data).float());
var split_testing_irr = ee.Number(1).subtract(ee.Number(nr_testing_selected/2).divide(size_irr_data).float());

// Create partition of testing data
var testingPartition_non_irr = non_irrigated_data.filter(ee.Filter.gt('random_fraction', split_testing_non_irr));
var testingPartition_irr = irrigated_data.filter(ee.Filter.gt('random_fraction', split_testing_irr));
var testing_data = testingPartition_irr.merge(testingPartition_non_irr);
var nr_testing_actual = testing_data.size();

// Classify the testing data.
var classifiedTesting = testing_data.classify(classifier);

// Get a confusion matrix representing expected accuracy.
var testAccuracy = classifiedTesting.errorMatrix('Irrigation_Status', 'classification');



//==================================================================\\
//========================= CLASSIFICATION =========================\\
//==================================================================\\

// Create a simple geometry which encompasses the Guadalquivir basin
// The Guadalquivir geometry is very complicated, which makes the export task too difficult for GEE
var EncompassingAreaCoord = [[-4.051003239053146,36.690101619278906],
                         [-2.831520817178146,36.962717034061036],
                         [-2.007546207803146,37.54859188064145], 
                         [-2.238259098428146,38.82653571741166], 
                         [-3.941139957803146,38.86931722139711], 
                         [-6.127419254678146,38.43174003276448], 
                         [-6.907448551553146,38.11261165391699], 
                         [-6.665749332803146,37.626943931163616], 
                         [-6.896462223428146,37.146839541616096], 
                         [-6.467995426553146,36.62840896552117], 
                         [-4.051003239053146,36.690101619278906]];
var EncompassingArea = ee.Geometry.Polygon({coords: EncompassingAreaCoord,
                          proj: 'EPSG:4326', 
                          geodesic: false});

var GualdaquivirExportROI = EncompassingArea;

for (var n = 0; n<YearsToClassify.length; n++) {
  // Get information on the current year and transform to string type
  var YEAR = YearsToClassify[n];
  var YEARSTRING = YEAR.toString();
  // Create an image with input data
  var YearlyData = VARIOUS_FUNCTIONS.Create_Input_Data(YEAR, landsat_collection, EditionIndicator, landsat_start_date, roi, percentiles, SSEBI_Folder);
  // Classify the input imagery and also add the probabilities for the outcome
  var ClassifiedImage = YearlyData.classify(classifier.setOutputMode('CLASSIFICATION')).rename('CLASSIFICATION')
    .addBands(YearlyData.classify(classifier.setOutputMode('PROBABILITY')).rename('PROBABILITY'))
    .set({'Landsat_edition':LANDSAT_EDITION, 'Year':YEAR});
  // Export the classified image 
  Export.image.toAsset({
      image: ClassifiedImage,
      description: ImageExportDescription+'_'+EditionIndicator+'_'+YEARSTRING,
      assetId: ExportAssetCollection+'/'+ImageExportName+'_'+EditionIndicator+'_'+YEARSTRING,
      region: GualdaquivirExportROI,
      scale: 30,
      crs: 'EPSG:32630',
      maxPixels: 1E13  
    });
}



//=================================================================\\
//========================= VISUALIZATION =========================\\
//=================================================================\\
var VisLST = {min:285, max:325, palette:['blue', 'green', 'red']};
var VisET = {min:0, max:6, palette:['red', 'green', 'blue']};
Map.addLayer(Guadalquivir_basin, {color: 'blue'}, 'Guadalquivir basin');
Map.addLayer(SIOSE_Subset_non_irr, {color: 'red'}, 'Non-irrigated polygons (SIOSE)');
Map.addLayer(SIOSE_Subset_irr, {color: 'green'}, 'Irrigated polygons (SIOSE)');
Map.addLayer(input_data.select('LST-W'), VisLST, 'S-SEBI LST [Winter]');
Map.addLayer(input_data.select('ET-W'), VisET, 'S-SEBI ET [Winter]');
Map.addLayer(input_data.select('LST-S'), VisLST, 'S-SEBI LST [Summer]');
Map.addLayer(input_data.select('ET-S'), VisET, 'S-SEBI ET [Summer]');



//===============================================================\\
//========================= EXPORTATION =========================\\
//===============================================================\\

// Provide the importance of the different input properties
// The 'classifier.schema()' command lists all the input properties of the classifier
// The 'classifier.explain()' command provides the importance of the different input properties in the classification
var dict_featImportance = classifier.explain();
var variable_importance = ee.Feature(null, ee.Dictionary(dict_featImportance).get('importance'));
var tree_decisions = ee.Feature(null, ee.Dictionary(dict_featImportance).get('trees'));
var outOfBagErrorEstimate = ee.Feature(null, ee.Dictionary(dict_featImportance).get('outOfBagErrorEstimate'));
Export.table.toDrive({
  collection: ee.FeatureCollection(variable_importance), 
  description: 'Export_classifier_description', 
  folder: DriveFolder, 
  fileNamePrefix: 'RF_Irrigation_Classifier_Described'
});

// Output the quanitities for several veriables
// State the variables which will be exported
var data_variables = [nr_trees, Min_Surface_Area, 
  SIOSEnonIrrigatedSize, SIOSEirrigatedSize, SIOSEpartlyIrrigatedSize, SIOSE_Subset_non_irr_Size, SIOSE_Subset_irr_Size,
  size_non_irr_data, size_irr_data,
  nr_training_actual, trainingPartition_non_irr.size(), trainingPartition_irr.size(),
  nr_testing_actual, testingPartition_non_irr.size(), testingPartition_irr.size()
  ];
  
function FileExportToDrive(trainAccuracy, testAccuracy, data_variables, fileName) {
  // Create FeatureCollection from the provided data
  var exportData = ee.FeatureCollection(ee.Feature(null, {
    'RF: nr trees'                              : data_variables[0], 
    'SIOSE: minimum area requirement'           : data_variables[1],
    
    'SIOSE: nr polygons [non-irrigated]'        : data_variables[2],
    'SIOSE: nr polygons [irrigated]'            : data_variables[3],
    'SIOSE: nr polygons [partly-irrigated]'     : data_variables[4],
    'SIOSE subset: nr polygons [non-irrigated]' : data_variables[5],
    'SIOSE subset: nr polygons [irrigated]'     : data_variables[6],
    
    'Data: nr points [non-irrigated]'           : data_variables[7],
    'Data: nr points [irrigated]'               : data_variables[8],
    
    'Training: nr points [total]'               : data_variables[9],
    'Training: nr points [non-irrigated]'       : data_variables[10],
    'Training: nr points [irrigated]'           : data_variables[11],
    
    'Testing: nr points [total]'                : data_variables[12],
    'Testing: nr points [non-irrigated]'        : data_variables[13],
    'Testing: nr points [irrigated]'            : data_variables[14],
    
    'Results training: accuracy matrix'         : trainAccuracy.array(),
    'Results training: accuracy'                : trainAccuracy.accuracy(), 
    'Results training: consumers accuracy (0/1)': trainAccuracy.consumersAccuracy(), 
    'Results training: producers accuracy (0/1)': trainAccuracy.producersAccuracy(), 
    'Results training: kappa'                   : trainAccuracy.kappa(),
    
    'Results testing: accuracy matrix'          : testAccuracy.array(), 
    'Results testing: accuracy'                 : testAccuracy.accuracy(), 
    'Results testing: consumers accuracy (0/1)' : testAccuracy.consumersAccuracy(), 
    'Results testing: producers accuracy (0/1)' : testAccuracy.producersAccuracy(), 
    'Results testing: kappa'                    : testAccuracy.kappa()     
  }));
  // Export the FeatureCollection.
  Export.table.toDrive({
    collection: exportData,
    description: 'Export_data_and_classifier_metrics',
    fileNamePrefix: fileName,
    folder: DriveFolder,
  });
  print('In file "'.concat(fileName).concat('" the exact number of training and testing data points can be found.'),
  'This file can be exported through task "export_classification_score".');
  return;
}
// Run the export function to export the results
var x = FileExportToDrive(trainAccuracy, testAccuracy, data_variables, ClassificationMetricsFileName);

